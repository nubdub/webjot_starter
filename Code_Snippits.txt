1.1 (App)
--------
let initialIdeas = [
  {
    id: 1,
    title: 'Blogging App',
    content: 'Build a blogging app where users can login and create blogs',
    technologies: 'React, Node',
    features: ['users can login and register', "users create and edit their posts"],
    date: Date.now()
  },
  {
    id: 2,
    title: 'Chatting App',
    content: 'Build a chatting app where users chat in private or in public channal',
    technologies: 'React, Node, Socket.io',
    features: ['users can chat in private', "users can chat in public"],
    date: Date.now()
  }
];
--------
1.2 (Ideas)
--------
<div>
        {this.props.ideas.map(idea => {
          return <Idea key={idea.id} idea={idea}/>
        })}
      </div>
--------
1.3 (Idea)
-------
 render() {
    const {idea} = this.props;
    return (
      <div className="card mb-5">
        <div className="card-header p-4">
          <h3 className="">{idea.title}</h3>
          <span  className=""> Posted {moment(idea.date.toString()).calendar()}</span>
        </div>
        <div className="card-body p-4">
          <p className="card-text lead">{idea.content}</p>
          <h5 className="mb-3">Features</h5>
          <ul className="list-group list-group-flush">
            {idea.features.map(feature => {
              return <li key={feature} className="list-group-item">{feature}</li>
            })}
          </ul>
          <br/>
          <h5 className="mb-3">Technologies</h5>
          <span className="lead">{idea.technologies}</span>
        </div>
        <div className="card-footer p-4">
          <a href={'/ideas/edit/' + idea.id} className="btn btn-outline-dark btn-block mb-2">Edit</a>
          <button className="btn btn-outline-danger btn-block">Delete</button>
        </div>
      </div>
    );
  }
--------
1.4 (AddIdea)
--------
render() {

    const features = [];

    for(let i = 0; i < this.state.featureCount; i++) {
      features.push(<input onChange={this.handleChange} key={i} type="text" className="form-control m-2" name={`feature${i}`} placeholder="Add a new feature..." required>
      </input>)
    }

    return (
      <div className="card">
        <form onSubmit={this.handleSubmit}>
          <div className="card-header">
            <h3>Add Project Idea</h3>
          </div>
          <div className="card-body">
            <div className="form-group">
              <label>Title</label>
              <input onChange={this.handleChange} type="text" className="form-control" name="title"  placeholder="Title..." required>
              </input>
            </div>
            <div className="form-group">
              <label>Details</label>
              <textarea onChange={this.handleChange} className="form-control" name="content"  placeholder="This project does..." required>
            </textarea>
            </div>
            <div className="form-group">
              <label>Technologies</label>
              <input onChange={this.handleChange} type="text" className="form-control" name="technology" placeholder="Nodejs, React, Express etc." required>
              </input>
            </div>
              <div className="form-group" id="features">
                <label>Features</label>
                {features}
              </div>
            <button onClick={this.addFeatureInput} className="btn btn-outline-secondary">More</button>
          </div>
          <div className="card-footer text-center">
            <button type="submit" className="btn btn-outline-primary ">Create</button>
          </div>
        </form>
      </div>
    );
  }
--------
1.5 (AddIdea)
--------
 addFeatureInput = () => {
    this.setState({featureCount: this.state.featureCount + 1});
    let featureName = `feature${this.state.featureCount}`;
    this.setState({[featureName]: ''})
  };
--------
1.6 (AddIdea)
--------
handleSubmit =(e) => {
    e.preventDefault();
    const newIdea = {
      title: this.state.title,
      content: this.state.content,
      technologies: this.state.technology,
      date: this.state.date,
      features: []
    };

    for(let i = 0; i < this.state.featureCount; i++) {
      newIdea.features.push(this.state[`feature${i}`])
    }

    this.props.addIdea(newIdea);
  };
--------
1.7 (App)
--------
addIdea =(newIdea, history) => {
    console.log(newIdea);
    this.setState({ideas: [newIdea, ...this.state.ideas]});
    history.push('/ideas');
  };
--------
1.8 (App)
--------
<Route exact path='/ideas/edit/:id' render={props => <EditIdea ideas = {this.state.ideas} props={props} id={props.match.params.id} editIdea={this.editIdea}/>}></Route>
--------
1.9 (EditIdea)
--------
render() {
    const features = [];
    for(let i = 0; i < this.state.featureCount; i++) {
      features.push(<input onChange={this.handleChange} value={this.state.features[i]} key={i} type="text" className="form-control m-2" name={`feature${i}`} placeholder="Add a new feature..." required>
      </input>)
    }

    return (
      <div className="card">
        <form onSubmit={this.handleSubmit}>
          <div className="card-header">
            <h3>Edit Project Idea</h3>
          </div>
          <div className="card-body">
            <div className="form-group">
              <label>Title</label>
              <input value={this.state.title} onChange={this.handleChange} type="text" className="form-control" name="title"  placeholder="Title..." required>
              </input>
            </div>
            <div className="form-group">
              <label>Details</label>
              <textarea value={this.state.content} onChange={this.handleChange} className="form-control" name="content"  placeholder="This project does..." required>
            </textarea>
            </div>
            <div className="form-group">
              <label>Technologies</label>
              <input value={this.state.technologies} onChange={this.handleChange} type="text" className="form-control" name="technologies" placeholder="Nodejs, React, Express etc." required>
              </input>
            </div>
            <div className="form-group" id="features">
              <label>Features</label>
              {features}
            </div>
            <button onClick={this.addFeature} className="btn btn-outline-secondary">More</button>
          </div>
          <div className="card-footer text-center">
            <button type="submit" className="btn btn-outline-primary ">Edit</button>
          </div>
        </form>
      </div>
    );
  }
-------
2.0 (EditIdea)
--------
 state = {
    featureCount: 0,
    title: '',
    content: '',
    technologies: '',
    date: Date.now(),
    features: []
  };
--------
2.1 (EditIdea)
--------
handleChange = (e) => {
    this.setState({[e.target.name]: e.target.value})
  };
--------
2.2 (EditIdea)
--------
componentDidMount() {
    this.props.ideas.forEach(idea => {
      if(idea.id === Number(this.props.id)) {
        this.setState({
          title: idea.title,
          content: idea.content,
          technologies: idea.technologies,
          features: [...idea.features],
          featureCount: idea.features.length
        });

      }
    });
  }
--------
2.3 (EditIdea)
--------
addFeature = () => {
    this.setState({featureCount: this.state.featureCount + 1});
    let featureName = `feature${this.state.featureCount}`;
    this.setState({[featureName]: ''})
  };
--------
2.4 (Idea)
--------
onDelete = () => {
      this.props.deleteIdea(this.props.idea.id)
   };
--------
2.5 (App)
--------
  deleteIdea = (ideaID) => {
    this.setState({ideas: [...this.state.ideas.filter(idea => idea.id !== ideaID)]})
  };
--------
2.6 (Login)
--------
render() {
     
    return (
      <div className="row">
        <div className="col-md-6 mx-auto">
          <div className="card card-body">
              <h3 className="text-center">Account Login</h3>
              <form onSubmit={event => this.handleSubmit(event)}>
                <div className="form-group">
                  <label htmlFor="email">Email</label>
                  <input onChange={this.handleChange} placeholder="Email"  type="email" name="email" className="form-control" required>
                  </input>
                </div>
                <div className="form-group">
                  <label htmlFor="password">Password</label>
                  <input onChange={this.handleChange} placeholder="Password" type="password" name="password" className="form-control" required>
                  </input>
                </div>
                <button type="submit" className="btn btn-outline-primary">Submit</button>
              </form>
          </div>
        </div>
      </div>
    );
  }
--------
2.7 (Login)
--------
 handleSubmit = (e) => {
      e.preventDefault();
      this.props.loginUser(this.state, this.props.history);
   };
--------
2.8 (App)
--------
 loginUser = (user,history) => {
    console.log(user);
    history.push('/ideas');
  };
--------
2.9 (Register)
--------
render() {
    return (
      <div className="row">
        <div className="col-md-6 mx-auto">
          <div className="card card-body">
            <h3 className="text-center">Account Register</h3>
            <form onSubmit={this.handleSubmit}>
              <div className="form-group">
                <label >Name</label>
                <input onChange={this.handleChange} type="text" placeholder="Name" className="form-control" name="name" value={this.state.name} required>
                </input>
              </div>
              <div className="form-group">
                <label >Email</label>
                <input onChange={this.handleChange} type="email" placeholder="Email" name="email" className="form-control" value={this.state.email} required>
                </input>
              </div>
              <div className="form-group">
                <label >Password</label>
                <input onChange={this.handleChange} type="password" placeholder="Password" name="password" className="form-control" value={this.state.password} required>
                </input>
              </div>
              <div className="form-group">
                <label >Confirm Password</label>
                <input onChange={this.handleChange} type="password" placeholder="Confirm Password" name="password2" className="form-control" value={this.state.password2} required>
                </input>
              </div>
              <button type="submit" className="btn btn-outline-primary">Submit</button>
            </form>
          </div>
        </div>
      </div>
    );
  }
--------
3.0 (Register)
--------
  handleSubmit = (e) => {
    e.preventDefault();
    this.props.registerUser(this.state, this.props.history);
  };
--------
3.1 (App)
--------
registerUser = (newUser, history) => {
    console.log(newUser);
    history.push('/users/login');
  };
--------
3.2 (App)
--------
  logoutUser = () => {
    history.push('/');
  };
--------
3.3 (Navbar)
--------
<a onClick={() => this.props.logoutUser(this.props.history)} href="" className="nav-link">Logout</a>
--------
